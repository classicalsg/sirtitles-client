"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.useGraphQL = void 0;

var _graphqlRequest = require("graphql-request");

var _react = require("react");

const reducer = (state, action) => {
  switch (action.type) {
    case 'get':
      return { ...state,
        loading: true
      };

    case 'loading':
      return { ...state,
        loading: true
      };

    case 'success':
      return { ...state,
        data: action.payload.data,
        error: null,
        loading: false
      };

    case 'error':
      return { ...state,
        data: null,
        error: action.payload.error,
        loading: false
      };

    default:
      return state;
  }
};
/**
 * @typedef {Object} GraphQL~State
 * @property {Object|array} data - The data returned from the function.
 * @property {boolean} error - Indicates whether the function had an error.
 * @property {boolean} loading - Indicates whether the function is executing
 */

/**
 * useGet hook to handle fetching data from a url
 *
 * @param {string} url - The url to be used
 * @param {string|object} query - The query to make
 * @param {object} variables - The variables object to be used with query
 * @returns {...GraphQL~State} - The states and results and the call to make the request
 */


const useGraphQL = function (url, query, variables = {}) {
  const [state, dispatch] = (0, _react.useReducer)(reducer, {
    data: [],
    error: null,
    loading: true
  });

  const fetchQuery = async variables => {
    dispatch({
      type: 'loading'
    });
    const resp = await (0, _graphqlRequest.request)(url, query, variables);
    const data = resp;
    dispatch({
      type: 'success',
      payload: {
        data
      }
    });
  };

  const holder = Object.keys(variables).map(key => variables[key]);
  (0, _react.useEffect)(() => {
    fetchQuery(variables); // eslint-disable-next-line react-hooks/exhaustive-deps
  }, holder);
  return { ...state
  };
};

exports.useGraphQL = useGraphQL;
var _default = useGraphQL;
exports.default = _default;